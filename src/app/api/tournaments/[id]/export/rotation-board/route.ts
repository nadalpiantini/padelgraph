/**
 * Export Rotation Board
 *
 * Exports the current tournament rotation board in PDF or PNG format.
 *
 * Query params:
 * - format: 'pdf' | 'png' (default: 'pdf')
 */

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@/lib/supabase/server';
import { jsPDF } from 'jspdf';
import { createCanvas } from 'canvas';

export async function GET(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params;
    const { searchParams } = new URL(request.url);
    const format = searchParams.get('format') || 'pdf';

    const supabase = await createClient();

    // Auth check
    const {
      data: { user },
    } = await supabase.auth.getUser();
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Fetch tournament
    const { data: tournament, error: tournamentError } = await supabase
      .from('tournament')
      .select('id, name, type, start_date, end_date')
      .eq('id', id)
      .single();

    if (tournamentError || !tournament) {
      return NextResponse.json(
        { error: 'Tournament not found' },
        { status: 404 }
      );
    }

    // Fetch current round data
    const { data: round } = await supabase
      .from('tournament_round')
      .select('*')
      .eq('tournament_id', id)
      .in('status', ['pending', 'in_progress'])
      .order('round_number', { ascending: true })
      .limit(1)
      .single();

    if (!round) {
      return NextResponse.json(
        { error: 'No active round found' },
        { status: 404 }
      );
    }

    // Fetch matches with full details
    const { data: matches } = await supabase
      .from('tournament_match')
      .select(
        `
        *,
        court:court(id, name),
        team1_player1:user_profile!team1_player1_id(user_id, full_name),
        team1_player2:user_profile!team1_player2_id(user_id, full_name),
        team2_player1:user_profile!team2_player1_id(user_id, full_name),
        team2_player2:user_profile!team2_player2_id(user_id, full_name)
      `
      )
      .eq('round_id', round.id);

    // Generate PDF
    if (format === 'pdf') {
      const pdf = new jsPDF();

      // Header
      pdf.setFontSize(20);
      pdf.text(tournament.name, 105, 20, { align: 'center' });

      pdf.setFontSize(12);
      pdf.text(`${tournament.type} Tournament`, 105, 30, { align: 'center' });
      pdf.text(`Round ${round.round_number}`, 105, 38, { align: 'center' });

      // Rotation Board
      pdf.setFontSize(14);
      pdf.text('Rotation Board', 20, 55);

      let yPosition = 65;

      matches?.forEach((match, index) => {
        const team1Player1 = match.team1_player1?.full_name || 'Player 1';
        const team1Player2 = match.team1_player2?.full_name || 'Player 2';
        const team2Player1 = match.team2_player1?.full_name || 'Player 3';
        const team2Player2 = match.team2_player2?.full_name || 'Player 4';

        pdf.setFontSize(10);
        pdf.text(`Court ${match.court?.name || match.court_id}`, 20, yPosition);

        pdf.setFontSize(9);
        pdf.text(
          `${team1Player1} & ${team1Player2} vs ${team2Player1} & ${team2Player2}`,
          20,
          yPosition + 6
        );

        if (match.team1_score !== null && match.team2_score !== null) {
          pdf.text(
            `Score: ${match.team1_score} - ${match.team2_score}`,
            20,
            yPosition + 12
          );
        } else {
          pdf.text('Score: Pending', 20, yPosition + 12);
        }

        yPosition += 22;

        // New page if needed
        if (yPosition > 270 && index < matches.length - 1) {
          pdf.addPage();
          yPosition = 20;
        }
      });

      // Footer
      const pageCount = pdf.getNumberOfPages();
      for (let i = 1; i <= pageCount; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.text(
          `Generated by PadelGraph - Page ${i} of ${pageCount}`,
          105,
          290,
          { align: 'center' }
        );
      }

      const pdfBuffer = Buffer.from(pdf.output('arraybuffer'));

      return new NextResponse(pdfBuffer, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="rotation-board-${id}.pdf"`,
        },
      });
    }

    // PNG format - generate image using canvas
    if (format === 'png') {
      const matchCount = matches?.length || 0;
      const canvasHeight = Math.max(600, 150 + matchCount * 120);
      const canvas = createCanvas(800, canvasHeight);
      const ctx = canvas.getContext('2d');

      // Background
      ctx.fillStyle = '#ffffff';
      ctx.fillRect(0, 0, 800, canvasHeight);

      // Header
      ctx.fillStyle = '#1f2937';
      ctx.font = 'bold 32px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(tournament.name, 400, 50);

      ctx.font = '18px Arial';
      ctx.fillText(`${tournament.type} Tournament`, 400, 80);
      ctx.fillText(`Round ${round.round_number}`, 400, 105);

      // Title
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'left';
      ctx.fillText('Rotation Board', 40, 145);

      // Matches
      let yPos = 180;
      matches?.forEach((match) => {
        const team1Player1 = match.team1_player1?.full_name || 'Player 1';
        const team1Player2 = match.team1_player2?.full_name || 'Player 2';
        const team2Player1 = match.team2_player1?.full_name || 'Player 3';
        const team2Player2 = match.team2_player2?.full_name || 'Player 4';

        // Card background
        ctx.fillStyle = '#f3f4f6';
        ctx.fillRect(40, yPos - 30, 720, 100);

        // Court
        ctx.fillStyle = '#4f46e5';
        ctx.font = 'bold 16px Arial';
        ctx.fillText(`Court ${match.court?.name || match.court_id}`, 60, yPos);

        // Teams
        ctx.fillStyle = '#1f2937';
        ctx.font = '14px Arial';
        ctx.fillText(
          `${team1Player1} & ${team1Player2} vs ${team2Player1} & ${team2Player2}`,
          60,
          yPos + 25
        );

        // Score
        ctx.font = 'bold 14px Arial';
        if (match.team1_score !== null && match.team2_score !== null) {
          ctx.fillText(
            `Score: ${match.team1_score} - ${match.team2_score}`,
            60,
            yPos + 50
          );
        } else {
          ctx.fillStyle = '#6b7280';
          ctx.fillText('Score: Pending', 60, yPos + 50);
        }

        yPos += 120;
      });

      // Footer
      ctx.fillStyle = '#9ca3af';
      ctx.font = '12px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(
        'Generated by PadelGraph',
        400,
        canvasHeight - 20
      );

      const pngBuffer = canvas.toBuffer('image/png');

      return new NextResponse(new Uint8Array(pngBuffer), {
        headers: {
          'Content-Type': 'image/png',
          'Content-Disposition': `attachment; filename="rotation-board-${id}.png"`,
        },
      });
    }

    return NextResponse.json({ error: 'Invalid format' }, { status: 400 });
  } catch (error) {
    console.error('Export rotation board error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
